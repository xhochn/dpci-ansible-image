name: Build, Test, and Release Docker Image

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: dpci-ansible-image
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/dpci-ansible-image

jobs:
  build-and-test:
    name: Build & Smoke-Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.generate_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if Dockerfile or build context changed
        id: check-dockerfile-change
        run: |
          git fetch origin ${{ github.event.before }}
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qE '(^Dockerfile$|^\.dockerignore$|^requirements.*|^.*\.sh$)'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate tag (only on main and Dockerfile change)
        id: generate_tag
        if: github.ref == 'refs/heads/main' && steps.check-dockerfile-change.outputs.changed == 'true'
        run: |
          git fetch --tags --force
          latest_tag=$(git tag -l 'v0.0.*' | sort -V | tail -n1)
          if [ -z "$latest_tag" ]; then
            next_tag="v0.0.1"
          else
            patch=$(echo "$latest_tag" | cut -d. -f3)
            next_tag="v0.0.$((patch + 1))"
          fi
          echo "tag=$next_tag" >> "$GITHUB_OUTPUT"

      - name: Build amd64 image (for test)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ${{ env.IMAGE_NAME }}:local
          cache-from: type=gha
          cache-to: type=gha,mode=min
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Smoke Test
        run: |
          docker run --rm dpci-ansible-image:local sh -c "echo Shell OK"
          docker run --rm dpci-ansible-image:local ansible --version
          docker run --rm dpci-ansible-image:local pre-commit --version

  tag-and-push:
    name: Release Multi-Arch Image
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && needs.build-and-test.outputs.image-tag != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check if tag exists on remote
        id: tagcheck
        run: |
          git fetch --tags --force
          tag=${{ needs.build-and-test.outputs.image-tag }}
          if git rev-parse "$tag" >/dev/null 2>&1 || git ls-remote --tags origin "$tag" | grep -q "$tag"; then
            echo "Tag '$tag' already exists."
            echo "skip_push=true" >> $GITHUB_OUTPUT
          else
            echo "Tag '$tag' does not exist."
            echo "skip_push=false" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push Multi-Arch Image
        if: steps.tagcheck.outputs.skip_push == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ needs.build-and-test.outputs.image-tag }}
            ${{ env.DOCKERHUB_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=min
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Create Git Tag
        if: steps.tagcheck.outputs.skip_push == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          tag="${{ needs.build-and-test.outputs.image-tag }}"
          git tag "$tag"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} "$tag"
